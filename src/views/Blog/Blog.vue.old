<template>
  <div class="blog-page">
    <h1 class="text-center my-4">
      Blog
    </h1>
    <div v-if="postError" class="connectionError">
      <Spinner />
    </div>
    <div v-else>
      <Suspense>
        <article v-for="post in formattedDocuments" class="shadow">
          <div class="content">
            <h2>{{ post.title }}</h2>
            <h5>{{ post.createdAt }}</h5>
            <div v-html="post.body"></div>
          </div>
          <div v-if="user" class="actions">
            <button class="btn" @click="editPost(post.id)">Edit</button>
            <button class="btn warning" @click="deletePost(post.id)">
              Delete
            </button>
          </div>
        </article>
      </Suspense>
    </div>
    <div class="subscribe">
      <form @submit.prevent="handleSubscription">
        <input
          type="text"
          placeholder="enter your email..."
          v-model="emailForSubscription"
        />
        <div v-if="subscribeError">{{ subscribeError }}</div>
        <button class="btn-alt" v-if="isPending"><Spinner /></button>
        <button class="btn-alt" v-else>Subscribe</button>
      </form>
    </div>
    <teleport to="#modals" v-if="showModal">
      <Modal @close="showModal = !showModal">
        <h1 class="my-1">Successfully Subscribed</h1>
        <p class="my-1">Thanks for subscribing ðŸ™‚</p>
        <p>
          We'll keep you up to date on all the latest events and news from
          <em>Inglis Support Service</em>.
        </p>
        <template v-slot:links></template>
      </Modal>
    </teleport>
  </div>
</template>

<script>
import { computed, isProxy, ref } from "vue";
import getCollection from "../../composables/getCollection";
import useCollection from "../../composables/useCollection";
import getUser from "../../composables/getUser";
import Spinner from "../../components/Spinner.vue";
import { timestamp } from "../../services/firebaseConfig";
import Modal from "../../components/Modal.vue";
import { db } from "../../services/firebaseConfig";
import dayjs from "dayjs";
import router from "../../router";

export default {
  components: { Spinner, Modal },
  setup() {
    const { error: subscribeError, addDoc } = useCollection("subscribedUsers");
    const { documents: posts, error: postError } = getCollection("posts");
    const { user } = getUser();

    const emailForSubscription = ref("");
    const showModal = ref(false);
    const isPending = ref(false);

    const formattedDocuments = computed(() => {
      if (posts.value) {
        return posts.value.map(doc => {
          let time = dayjs(doc.createdAt.toDate()).format(
            "MMMM D, YYYY h:mm A"
          );
          return { ...doc, createdAt: time };
        });
      }
    });

    const deletePost = async id => {
      await db
        .collection("posts")
        .doc(id)
        .delete();
    };

    const editPost = async id => {
      router.push({ name: "EditPost", params: { id } });
    };

    const handleSubscription = async () => {
      if (emailForSubscription.value) {
        isPending.value = true;
        const res = await addDoc({
          email: emailForSubscription.value,
          subscribedAt: timestamp()
        });
        isPending.value = false;
        if (!subscribeError.value) {
          emailForSubscription.value = "";
          showModal.value = true;
        } else {
        }
      }
    };

    return {
      formattedDocuments,
      emailForSubscription,
      handleSubscription,
      isPending,
      postError,
      subscribeError,
      showModal,
      user,
      deletePost,
      editPost
    };
  }
};
</script>

<style>

.subscribe {
  display: flex;
  flex-direction: row;
  justify-content: center;
  margin: 2em 0;
}
.subscribe input {
  flex: 2;
}
.subscribe button {
  flex: 1;
  margin-left: 3px;
}
.connectionError {
  place-self: center;
}
</style>
